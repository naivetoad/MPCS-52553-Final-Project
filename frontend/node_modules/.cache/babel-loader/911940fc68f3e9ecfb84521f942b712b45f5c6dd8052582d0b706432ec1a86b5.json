{"ast":null,"code":"var _jsxFileName = \"/Users/naivetoad/Desktop/MPCS_52553_Final_Project/frontend/src/components/channels/ChannelView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { authFetch } from '../../utils/api';\nimport { toast } from 'react-toastify';\nimport MessageInput from '../messages/MessageInput';\nimport MessageList from '../messages/MessageList';\nimport '../../styles/channels.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelView() {\n  _s();\n  const {\n    channelId\n  } = useParams();\n  const navigate = useNavigate();\n  const [channel, setChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Fetch channel details\n  useEffect(() => {\n    if (!channelId) return;\n    const fetchChannel = async () => {\n      try {\n        const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setChannel(data);\n          document.title = `#${data.name} - Belay`;\n        }\n      } catch (error) {\n        console.error('Error fetching channel:', error);\n        setError('Failed to load channel');\n      }\n    };\n    fetchChannel();\n\n    // Listen for channel name updates\n    const handleChannelUpdate = event => {\n      if (event.detail.channelId === parseInt(channelId)) {\n        setChannel(prev => ({\n          ...prev,\n          name: event.detail.newName\n        }));\n        document.title = `#${event.detail.newName} - Belay`;\n      }\n    };\n\n    // Listen for channel deletion\n    const handleChannelDelete = event => {\n      if (event.detail.channelId === parseInt(channelId)) {\n        toast.info('This channel has been deleted');\n        navigate('/');\n      }\n    };\n    window.addEventListener('channelDeleted', handleChannelDelete);\n    window.addEventListener('channelNameUpdated', handleChannelUpdate);\n    return () => {\n      window.removeEventListener('channelDeleted', handleChannelDelete);\n      window.removeEventListener('channelNameUpdated', handleChannelUpdate);\n    };\n  }, [channelId, navigate]);\n\n  // Mark channel as read when entering and periodically\n  useEffect(() => {\n    if (!channelId) return;\n    const markChannelRead = async () => {\n      try {\n        await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/read`, {\n          method: 'POST'\n        });\n      } catch (error) {\n        console.error('Error marking channel as read:', error);\n      }\n    };\n\n    // Mark as read immediately when entering channel\n    markChannelRead();\n\n    // Set up interval to mark as read periodically\n    const readInterval = setInterval(markChannelRead, 5000);\n\n    // Cleanup interval on unmount or channel change\n    return () => clearInterval(readInterval);\n  }, [channelId]);\n\n  // Add this useEffect for fetching messages\n  useEffect(() => {\n    if (!channelId) return;\n    const fetchMessages = async () => {\n      try {\n        console.log('Fetching messages for channel:', channelId); // Debug log\n        const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`);\n        console.log('Messages response status:', response.status); // Debug log\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Received messages:', data); // Debug log\n          setMessages(data);\n        } else {\n          const errorData = await response.json();\n          console.error('Error response:', errorData);\n          setError('Failed to load messages');\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load messages');\n      }\n    };\n    fetchMessages();\n    const messagesPollInterval = setInterval(fetchMessages, 1000);\n    return () => clearInterval(messagesPollInterval);\n  }, [channelId]);\n  const handleSendMessage = async text => {\n    if (!channelId) return;\n    try {\n      const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'POST',\n        body: JSON.stringify({\n          content: text\n        })\n      });\n      if (response.ok) {\n        const newMessage = await response.json();\n        setMessages(prev => [...prev, newMessage]);\n        return true;\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n      throw error;\n    }\n  };\n  if (!channelId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-channel-message\",\n      children: \"Please select a channel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"#\", channel === null || channel === void 0 ? void 0 : channel.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages,\n      channelId: channelId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      channelId: channelId,\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(ChannelView, \"dC1mpci1gJ13xuaCY6vl/7MhKbQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ChannelView;\nexport default ChannelView;\nvar _c;\n$RefreshReg$(_c, \"ChannelView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","authFetch","toast","MessageInput","MessageList","jsxDEV","_jsxDEV","ChannelView","_s","channelId","navigate","channel","setChannel","messages","setMessages","error","setError","fetchChannel","response","ok","data","json","document","title","name","console","handleChannelUpdate","event","detail","parseInt","prev","newName","handleChannelDelete","info","window","addEventListener","removeEventListener","markChannelRead","method","readInterval","setInterval","clearInterval","fetchMessages","log","status","errorData","messagesPollInterval","handleSendMessage","text","body","JSON","stringify","content","newMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/naivetoad/Desktop/MPCS_52553_Final_Project/frontend/src/components/channels/ChannelView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { authFetch } from '../../utils/api';\nimport { toast } from 'react-toastify';\nimport MessageInput from '../messages/MessageInput';\nimport MessageList from '../messages/MessageList';\nimport '../../styles/channels.css';\n\nfunction ChannelView() {\n  const { channelId } = useParams();\n  const navigate = useNavigate();\n  const [channel, setChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Fetch channel details\n  useEffect(() => {\n    if (!channelId) return;\n\n    const fetchChannel = async () => {\n      try {\n        const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setChannel(data);\n          document.title = `#${data.name} - Belay`;\n        }\n      } catch (error) {\n        console.error('Error fetching channel:', error);\n        setError('Failed to load channel');\n      }\n    };\n\n    fetchChannel();\n\n    // Listen for channel name updates\n    const handleChannelUpdate = (event) => {\n      if (event.detail.channelId === parseInt(channelId)) {\n        setChannel(prev => ({\n          ...prev,\n          name: event.detail.newName\n        }));\n        document.title = `#${event.detail.newName} - Belay`;\n      }\n    };\n\n    // Listen for channel deletion\n    const handleChannelDelete = (event) => {\n      if (event.detail.channelId === parseInt(channelId)) {\n        toast.info('This channel has been deleted');\n        navigate('/');\n      }\n    };\n\n    window.addEventListener('channelDeleted', handleChannelDelete);\n    window.addEventListener('channelNameUpdated', handleChannelUpdate);\n\n    return () => {\n      window.removeEventListener('channelDeleted', handleChannelDelete);\n      window.removeEventListener('channelNameUpdated', handleChannelUpdate);\n    };\n  }, [channelId, navigate]);\n\n  // Mark channel as read when entering and periodically\n  useEffect(() => {\n    if (!channelId) return;\n\n    const markChannelRead = async () => {\n      try {\n        await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/read`, {\n          method: 'POST'\n        });\n      } catch (error) {\n        console.error('Error marking channel as read:', error);\n      }\n    };\n\n    // Mark as read immediately when entering channel\n    markChannelRead();\n\n    // Set up interval to mark as read periodically\n    const readInterval = setInterval(markChannelRead, 5000);\n\n    // Cleanup interval on unmount or channel change\n    return () => clearInterval(readInterval);\n  }, [channelId]);\n\n  // Add this useEffect for fetching messages\n  useEffect(() => {\n    if (!channelId) return;\n\n    const fetchMessages = async () => {\n      try {\n        console.log('Fetching messages for channel:', channelId); // Debug log\n        const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`);\n        console.log('Messages response status:', response.status); // Debug log\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log('Received messages:', data); // Debug log\n          setMessages(data);\n        } else {\n          const errorData = await response.json();\n          console.error('Error response:', errorData);\n          setError('Failed to load messages');\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load messages');\n      }\n    };\n\n    fetchMessages();\n    const messagesPollInterval = setInterval(fetchMessages, 1000);\n    return () => clearInterval(messagesPollInterval);\n}, [channelId]);\n\n  const handleSendMessage = async (text) => {\n    if (!channelId) return;\n\n    try {\n      const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'POST',\n        body: JSON.stringify({ content: text })\n      });\n\n      if (response.ok) {\n        const newMessage = await response.json();\n        setMessages(prev => [...prev, newMessage]);\n        return true;\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n      throw error;\n    }\n  };\n\n  if (!channelId) {\n    return <div className=\"select-channel-message\">Please select a channel</div>;\n  }\n\n  return (\n    <div className=\"channel-view\">\n      <div className=\"channel-header\">\n        <h2>#{channel?.name}</h2>\n        {error && <div className=\"error-message\">{error}</div>}\n      </div>\n\n      <MessageList messages={messages} channelId={channelId} />\n      <MessageInput channelId={channelId} onSendMessage={handleSendMessage} />\n    </div>\n  );\n}\n\nexport default ChannelView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}