{"ast":null,"code":"var _jsxFileName = \"/Users/naivetoad/Desktop/MPCS_52553_Final_Project/frontend/src/components/channels/ChannelView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { authFetch } from '../../utils/api';\nimport { toast } from 'react-toastify';\nimport MessageList from '../messages/MessageList';\nimport MessageInput from '../messages/MessageInput';\nimport ReplyThread from '../messages/ReplyThread';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChannelView() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    channelId\n  } = useParams();\n  const [channel, setChannel] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const isMobile = window.innerWidth <= 768;\n\n  // Fetch channel details\n  useEffect(() => {\n    if (!channelId) return;\n    const fetchChannel = async () => {\n      try {\n        const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setChannel(data);\n          document.title = `#${data.name} - Belay`;\n        }\n      } catch (error) {\n        console.error('Error fetching channel:', error);\n        setError('Failed to load channel');\n      }\n    };\n    fetchChannel();\n\n    // Listen for channel updates and deletions\n    const handleChannelUpdate = event => {\n      if (event.detail.channelId === parseInt(channelId)) {\n        setChannel(prev => ({\n          ...prev,\n          name: event.detail.newName\n        }));\n        document.title = `#${event.detail.newName} - Belay`;\n      }\n    };\n    const handleChannelDelete = event => {\n      if (event.detail.channelId === parseInt(channelId)) {\n        toast.info('This channel has been deleted');\n        navigate('/');\n      }\n    };\n    window.addEventListener('channelDeleted', handleChannelDelete);\n    window.addEventListener('channelNameUpdated', handleChannelUpdate);\n    return () => {\n      window.removeEventListener('channelDeleted', handleChannelDelete);\n      window.removeEventListener('channelNameUpdated', handleChannelUpdate);\n    };\n  }, [channelId, navigate]);\n\n  // Mark channel as read when viewing or receiving new messages\n  useEffect(() => {\n    if (!channelId) return;\n    const markChannelRead = async () => {\n      try {\n        await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/read`, {\n          method: 'POST'\n        });\n      } catch (error) {\n        console.error('Error marking channel as read:', error);\n      }\n    };\n    markChannelRead();\n  }, [channelId, messages]);\n\n  // Fetch messages\n  useEffect(() => {\n    if (!channelId) return;\n    const fetchMessages = async () => {\n      try {\n        const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`);\n        if (response.ok) {\n          const data = await response.json();\n          setMessages(data);\n        }\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load messages');\n      }\n    };\n    fetchMessages();\n\n    // Set up polling for new messages\n    const interval = setInterval(fetchMessages, 1000);\n    return () => clearInterval(interval);\n  }, [channelId]);\n  const handleNewMessage = async content => {\n    try {\n      const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n        method: 'POST',\n        body: JSON.stringify({\n          content\n        })\n      });\n      if (response.ok) {\n        const newMessage = await response.json();\n        setMessages(prev => [newMessage, ...prev]);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast.error('Failed to send message');\n    }\n  };\n  const handleReplyClick = messageId => {\n    setSelectedMessageId(messageId);\n  };\n  const handleCloseThread = () => {\n    setSelectedMessageId(null);\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-messages\",\n      children: [isMobile && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mobile-nav-button\",\n        onClick: () => navigate('/'),\n        children: \"\\u2190 Channels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"#\", channel === null || channel === void 0 ? void 0 : channel.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages,\n        channelId: channelId,\n        onReplyClick: handleReplyClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleNewMessage,\n        channelId: channelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), selectedMessageId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `thread-panel ${isMobile ? 'show' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Thread\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseThread,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ReplyThread, {\n        channelId: channelId,\n        messageId: selectedMessageId,\n        onClose: handleCloseThread\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n_s(ChannelView, \"KgVmFM3+lK1yRKSfnYkxA2w2La4=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChannelView;\nexport default ChannelView;\nvar _c;\n$RefreshReg$(_c, \"ChannelView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","authFetch","toast","MessageList","MessageInput","ReplyThread","jsxDEV","_jsxDEV","ChannelView","_s","navigate","channelId","channel","setChannel","messages","setMessages","error","setError","selectedMessageId","setSelectedMessageId","isMobile","window","innerWidth","fetchChannel","response","ok","data","json","document","title","name","console","handleChannelUpdate","event","detail","parseInt","prev","newName","handleChannelDelete","info","addEventListener","removeEventListener","markChannelRead","method","fetchMessages","interval","setInterval","clearInterval","handleNewMessage","content","body","JSON","stringify","newMessage","handleReplyClick","messageId","handleCloseThread","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onReplyClick","onSendMessage","onClose","_c","$RefreshReg$"],"sources":["/Users/naivetoad/Desktop/MPCS_52553_Final_Project/frontend/src/components/channels/ChannelView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { authFetch } from '../../utils/api';\nimport { toast } from 'react-toastify';\nimport MessageList from '../messages/MessageList';\nimport MessageInput from '../messages/MessageInput';\nimport ReplyThread from '../messages/ReplyThread';\n\nfunction ChannelView() {\n    const navigate = useNavigate();\n    const { channelId } = useParams();\n    const [channel, setChannel] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [error, setError] = useState(null);\n    const [selectedMessageId, setSelectedMessageId] = useState(null);\n    const isMobile = window.innerWidth <= 768;\n\n    // Fetch channel details\n    useEffect(() => {\n        if (!channelId) return;\n\n        const fetchChannel = async () => {\n            try {\n                const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}`);\n                if (response.ok) {\n                    const data = await response.json();\n                    setChannel(data);\n                    document.title = `#${data.name} - Belay`;\n                }\n            } catch (error) {\n                console.error('Error fetching channel:', error);\n                setError('Failed to load channel');\n            }\n        };\n\n        fetchChannel();\n\n        // Listen for channel updates and deletions\n        const handleChannelUpdate = (event) => {\n            if (event.detail.channelId === parseInt(channelId)) {\n                setChannel(prev => ({\n                    ...prev,\n                    name: event.detail.newName\n                }));\n                document.title = `#${event.detail.newName} - Belay`;\n            }\n        };\n\n        const handleChannelDelete = (event) => {\n            if (event.detail.channelId === parseInt(channelId)) {\n                toast.info('This channel has been deleted');\n                navigate('/');\n            }\n        };\n\n        window.addEventListener('channelDeleted', handleChannelDelete);\n        window.addEventListener('channelNameUpdated', handleChannelUpdate);\n\n        return () => {\n            window.removeEventListener('channelDeleted', handleChannelDelete);\n            window.removeEventListener('channelNameUpdated', handleChannelUpdate);\n        };\n    }, [channelId, navigate]);\n\n    // Mark channel as read when viewing or receiving new messages\n    useEffect(() => {\n        if (!channelId) return;\n\n        const markChannelRead = async () => {\n            try {\n                await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/read`, {\n                    method: 'POST'\n                });\n            } catch (error) {\n                console.error('Error marking channel as read:', error);\n            }\n        };\n\n        markChannelRead();\n    }, [channelId, messages]);\n\n    // Fetch messages\n    useEffect(() => {\n        if (!channelId) return;\n\n        const fetchMessages = async () => {\n            try {\n                const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`);\n                if (response.ok) {\n                    const data = await response.json();\n                    setMessages(data);\n                }\n            } catch (error) {\n                console.error('Error fetching messages:', error);\n                setError('Failed to load messages');\n            }\n        };\n\n        fetchMessages();\n\n        // Set up polling for new messages\n        const interval = setInterval(fetchMessages, 1000);\n\n        return () => clearInterval(interval);\n    }, [channelId]);\n\n    const handleNewMessage = async (content) => {\n        try {\n            const response = await authFetch(`http://127.0.0.1:5000/api/channels/${channelId}/messages`, {\n                method: 'POST',\n                body: JSON.stringify({ content })\n            });\n\n            if (response.ok) {\n                const newMessage = await response.json();\n                setMessages(prev => [newMessage, ...prev]);\n            }\n        } catch (error) {\n            console.error('Error sending message:', error);\n            toast.error('Failed to send message');\n        }\n    };\n\n    const handleReplyClick = (messageId) => {\n        setSelectedMessageId(messageId);\n    };\n\n    const handleCloseThread = () => {\n        setSelectedMessageId(null);\n    };\n\n    if (error) {\n        return <div className=\"error-message\">{error}</div>;\n    }\n\n    return (\n        <div className=\"content\">\n            <div className=\"channel-messages\">\n                {isMobile && (\n                    <button \n                        className=\"mobile-nav-button\"\n                        onClick={() => navigate('/')}\n                    >\n                        ← Channels\n                    </button>\n                )}\n                <div className=\"channel-header\">\n                    <h2>#{channel?.name}</h2>\n                </div>\n                <MessageList \n                    messages={messages} \n                    channelId={channelId}\n                    onReplyClick={handleReplyClick}\n                />\n                <MessageInput \n                    onSendMessage={handleNewMessage} \n                    channelId={channelId}\n                />\n            </div>\n            \n            {selectedMessageId && (\n                <div className={`thread-panel ${isMobile ? 'show' : ''}`}>\n                    <div className=\"thread-header\">\n                        <h3>Thread</h3>\n                        <button onClick={handleCloseThread}>Close</button>\n                    </div>\n                    <ReplyThread\n                        channelId={channelId}\n                        messageId={selectedMessageId}\n                        onClose={handleCloseThread}\n                    />\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ChannelView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}